
==================
Config
==================

---@config { ["FUNCTION_ORDER"] = "orig" }

---

(program
  (documentation_config
    (tableconstructor
      (fieldlist
        (field (field_left_bracket) (string) (field_right_bracket) (string))))))

==================
Comments before function
==================

--  This is a comment
function not_documented()
end

---

(program
  (comment)
  (function_statement
    (function_start)
    (function_name (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

==================
Simple documentation
==================

--- hello world
function cool_function()
  return true
end

---

(program
  (function_statement
    documentation: (emmy_documentation (emmy_header))
    (function_start)
    name: (function_name (identifier))
    (function_body_paren)
    (function_body_paren)
    body: (return_statement (boolean))
    (function_end)))

==================
Return documentation with text
==================

--- With Text
---@return bool Explanation of bool
function with_text()
  return false
end

---

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_return
        type: (emmy_type (identifier))
        description: (emmy_return_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    body: (return_statement
      (boolean))
    (function_end)))

==================
Return documentation with todo
==================

--- With Text
---@todo Something has to be done
function with_text()
  return false
end

---

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_todo))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    body: (return_statement
      (boolean))
    (function_end)))

==================
Two lines of top level documentation
==================

--- hello world
--- goodbye world
function cool_function()
  return true
end

---

(program
  (function_statement
    documentation: (emmy_documentation (emmy_header))
    (function_start)
    name: (function_name (identifier))
    (function_body_paren)
    (function_body_paren)
    body: (return_statement (boolean))
    (function_end)))

==================
Full documentation
==================

--- A function description
---@param p string: param value
---@param x table: another value
---@return true
function cool_function(p, x)
  return true
end

---

(program
  (function_statement
    documentation: (emmy_documentation
                     (emmy_header)
                     (emmy_parameter
                       name: (identifier)
                       type: (emmy_type (identifier))
                       description: (parameter_description))
                     (emmy_parameter
                       name: (identifier)
                       type: (emmy_type (identifier))
                       description: (parameter_description))
                     (emmy_return
                       type: (emmy_type (identifier))
                       description: (emmy_return_description)))
    (function_start)
    name: (function_name (identifier))
    (function_body_paren)
    (parameter_list (identifier) (identifier))
    (function_body_paren)
    body: (return_statement (boolean))
    (function_end)))

==================
Multiple types with spaces
==================

--- A function description
---@param p string| number : param value
function cool_function(p) end

---

(program
  (function_statement
    documentation: (emmy_documentation
                     (emmy_header)
                     (emmy_parameter
                       name: (identifier)
                       type: (emmy_type (identifier))
                       type: (emmy_type (identifier))
                       description: (parameter_description)))
    (function_start)
    name: (function_name (identifier))
    (function_body_paren)
    (parameter_list (identifier))
    (function_body_paren)
    (function_end)))

==================
Should work for variables as well
==================

--- Example of my_func
---@param y string: Y description
M.my_func = function(y)
end

---

(program
  (variable_declaration
    documentation: (emmy_documentation
                     (emmy_header)
                     (emmy_parameter
                       name: (identifier)
                       type: (emmy_type (identifier))
                       description: (parameter_description)))
    name: (variable_declarator (identifier) (identifier))
    value: (function
             (function_start)
             (function_body_paren)
             (parameter_list (identifier))
             (function_body_paren)
             (function_end))))

==================
Real life example from neovim
==================

--- Store Diagnostic[] by line
---@param diagnostics Diagnostic[]: hello
---@return table<number, Diagnostic[]>
local _diagnostic_lines = function(diagnostics)
end

---

(program
  (variable_declaration
    documentation: (emmy_documentation
                     (emmy_header)
                     (emmy_parameter
                       name: (identifier)
                       type: (emmy_type (emmy_type_list type: (emmy_type (identifier))))
                       description: (parameter_description))
                     (emmy_return
                       type: (emmy_type (emmy_type_map
                                          key: (emmy_type (identifier))
                                          value: (emmy_type (emmy_type_list type: (emmy_type (identifier))))))
                       description: (emmy_return_description)))
    (local)
    name: (variable_declarator (identifier))
    value: (function
             (function_start)
             (function_body_paren)
             (parameter_list (identifier))
             (function_body_paren)
             (function_end))))

==================
Real life example from neovim 2
==================

--- Save diagnostics to the current buffer.
---
--- Handles saving diagnostics from multiple clients in the same buffer.
---@param diagnostics Diagnostic[]
---@param bufnr number
---@param client_id number
function M.save(diagnostics, bufnr, client_id)
  validate {
    diagnostics = {diagnostics, 't'},
    bufnr = {bufnr, 'n'},
    client_id = {client_id, 'n', true},
  }
end

---

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_type_list
            (emmy_type
              (identifier)))))
      (emmy_parameter
        (identifier)
        (emmy_type
          (identifier)))
      (emmy_parameter
        (identifier)
        (emmy_type
          (identifier))))
    (function_start)
    (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier) (identifier) (identifier))
    (function_body_paren)
    (function_call
      (identifier)
      (table_argument
        (fieldlist
          (field
            (identifier)
            (tableconstructor
              (fieldlist
                (field (identifier))
                (field (string)))))
          (field
            (identifier)
            (tableconstructor
              (fieldlist
                (field (identifier))
                (field (string)))))
          (field
            (identifier)
            (tableconstructor
              (fieldlist
                (field (identifier))
                (field (string))
                (field (boolean))))))))
    (function_end)))

==================
Eval doc
==================

--- Cooler function, with no params
---@eval 7 + 15
function M:even_cooler()
end

---

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_eval (binary_operation (number) (number))))
    (function_start)
    (function_name
      (identifier)
      (table_colon)
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

==================
Multiple params
==================


local x = {}

--- This function has documentation
---@param abc string: Docs for abc
  ---@param def string: Other docs for def
---@param bxy string: Final docs
function x.hello(abc, def, bxy)
  return abc .. def .. bxy
end

return x

---

(program
 (variable_declaration (local) (variable_declarator (identifier)) (tableconstructor))
 (function_statement
  (emmy_documentation
   (emmy_header)
   (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description))
   (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description))
   (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description)))
  (function_start)
  (function_name (identifier) (table_dot) (identifier))
  (function_body_paren)
  (parameter_list (identifier) (identifier) (identifier))
  (function_body_paren)
  (return_statement
   (binary_operation (identifier) (binary_operation (identifier) (identifier))))
  (function_end))
 (module_return_statement (identifier)))

==================
Field
==================

--- This function has documentation
---@param t table: Some table
---@field name string: name
function M.hello(t)
  return t.name
end

---

(program
 (function_statement
  (emmy_documentation
   (emmy_header)
   (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description))
   (emmy_field (identifier) (emmy_type (identifier)) (field_description)))
  (function_start)
  (function_name (identifier) (table_dot) (identifier))
  (function_body_paren)
  (parameter_list (identifier))
  (function_body_paren)
  (return_statement (identifier) (identifier))
  (function_end)))

==================
Class comment
==================

---@class Array @Numeric table

---

(program
  (documentation_class (emmy_class (emmy_type (identifier)) (class_description)))
)

==================
Super class comment
==================

---@class Map @table table
---@class Array : Map @Numeric table

---

(program
  (documentation_class (emmy_class (emmy_type (identifier)) (class_description)))
  (documentation_class (emmy_class (emmy_type (identifier)) (emmy_type (identifier)) (class_description)))
)

==================
Class with fields
==================

---@class sqlite @db connection

---@class Stmt @object to deal with sqlite statements
---@field conn sqlite: connection to database

---

(program
  (documentation_class (emmy_class (emmy_type (identifier)) (class_description)))
  (documentation_class
    (emmy_class (emmy_type (identifier)) (class_description))
    (emmy_field (identifier) (emmy_type (identifier)) (field_description))
  )
)

==================
Real world class
==================

local Job = {}
--- HEADER
---@class Job @desc
---@field cmd string: comamnd
---@param o table: options
function Job:new(o)
  return setmetatable({}, self)
end

---

(program
  (variable_declaration (local) (variable_declarator (identifier)) (tableconstructor))
  (function_statement
   (emmy_documentation
    (emmy_header)
    (emmy_class (emmy_type (identifier)) (class_description))
    (emmy_field (identifier) (emmy_type (identifier)) (field_description))
    (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description)))
   (function_start)
   (function_name (identifier) (table_colon) (identifier))
   (function_body_paren)
   (parameter_list (identifier))
   (function_body_paren)
   (return_statement
    (function_call (identifier) (function_call_paren)
     (function_arguments (tableconstructor) (identifier))
   (function_call_paren)))
  (function_end))
)

==================
Using classes as types
==================

local Job = {}

---@class Map @table lie

--- HEADER
---@class Job @desc
---@field cmd string: comamnd
---@param o table: options
function Job:new(o)
  return setmetatable(o, self)
end

---

(program
  (variable_declaration (local) (variable_declarator (identifier)) (tableconstructor))
  (documentation_class (emmy_class (emmy_type (identifier)) (class_description)))
  (function_statement
   (emmy_documentation
    (emmy_header)
    (emmy_class (emmy_type (identifier)) (class_description))
    (emmy_field (identifier) (emmy_type (identifier)) (field_description))
    (emmy_parameter (identifier) (emmy_type (identifier)) (parameter_description)))
   (function_start)
   (function_name (identifier) (table_colon) (identifier))
   (function_body_paren)
   (parameter_list (identifier))
   (function_body_paren)
   (return_statement
    (function_call (identifier) (function_call_paren)
     (function_arguments (identifier) (identifier))
   (function_call_paren)))
  (function_end))
)

==================
Multiline params
==================

--- Get the diagnostics by line
---@param opts table|nil: Configuration keys
---             - severity: (DiagnosticSeverity, default nil)
function M.get_line_diagnostics(bufnr, line_nr, opts, client_id)
end
)
