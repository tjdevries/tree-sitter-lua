================================================================================
Config
================================================================================

---@config { ["FUNCTION_ORDER"] = "orig" }

--------------------------------------------------------------------------------

(program
  (documentation_config
    (tableconstructor
      (fieldlist
        (field
          (field_left_bracket)
          (string)
          (field_right_bracket)
          (string))))))

================================================================================
Comments before function
================================================================================

--  This is a comment
function not_documented()
end

--------------------------------------------------------------------------------

(program
  (comment)
  (function_statement
    (function_start)
    (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Simple documentation
================================================================================

--- hello world
function cool_function()
  return true
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Return documentation with text
================================================================================

--- With Text
---@return bool: Explanation of bool
function with_text()
  return false
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_return
        type: (emmy_type
          (emmy_identifier))
        description: (emmy_return_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Return documentation with todo
================================================================================

--- With Text
---@todo Something has to be done
function with_text()
  return false
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_todo))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Two lines of top level documentation
================================================================================

--- hello world
--- goodbye world
function cool_function()
  return true
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Full documentation, no return description
================================================================================

--- A function description
---@param p string: param value
---@param x table: another value
---@return true
function cool_function(p, x)
  return true
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description))
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description))
      (emmy_return
        type: (emmy_type
          (emmy_identifier))))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Full documentation, return description
================================================================================

--- A function description
---@param p string: param value
---@param x table: another value
---@return true @comment A description
function cool_function(p, x)
  return true
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description))
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description))
      (emmy_return
        type: (emmy_type
          (emmy_identifier))
        description: (emmy_return_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Ellipsis as parameter
================================================================================

--- A function description
---@param ... vararg: param value
function cool_function(...)
  return true
end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (ellipsis)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (ellipsis))
    (function_body_paren)
    (function_body
      (return_statement
        (boolean)))
    (function_end)))

================================================================================
Multiple types with spaces
================================================================================

--- A function description
---@param p string| number : param value
function cool_function(p) end

--------------------------------------------------------------------------------

(program
  (function_statement
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description)))
    (function_start)
    name: (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))

================================================================================
Should work for variables as well
================================================================================

--- Example of my_func
---@param y string: Y description
M.my_func = function(y)
end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description)))
    name: (variable_declarator
      (identifier)
      (identifier))
    value: (function
      (function_start)
      (function_body_paren)
      (parameter_list
        (identifier))
      (function_body_paren)
      (function_end))))

================================================================================
Real life example from neovim
================================================================================

--- Store Diagnostic[] by line
---@param diagnostics Diagnostic[]: hello
---@return table<number, Diagnostic[]>
local _diagnostic_lines = function(diagnostics)
end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    documentation: (emmy_documentation
      (emmy_header)
      (emmy_parameter
        name: (identifier)
        type: (emmy_type
          (emmy_identifier))
        description: (parameter_description))
      (emmy_return
        type: (emmy_type
          (emmy_type_key_value
            key: (emmy_type
              (emmy_identifier))
            value: (emmy_type
              (emmy_type_array
                type: (emmy_type
                  (emmy_identifier))))))))
    (local)
    name: (variable_declarator
      (identifier))
    value: (function
      (function_start)
      (function_body_paren)
      (parameter_list
        (identifier))
      (function_body_paren)
      (function_end))))

================================================================================
Real life example from neovim 2
================================================================================

--- Save diagnostics to the current buffer.
---
--- Handles saving diagnostics from multiple clients in the same buffer.
---@param diagnostics Diagnostic[]
---@param bufnr number
---@param client_id number
function M.save(diagnostics, bufnr, client_id)
  validate {
    diagnostics = {diagnostics, 't'},
    bufnr = {bufnr, 'n'},
    client_id = {client_id, 'n', true},
  }
end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier)))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))))
    (function_start)
    (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (function_call
        (identifier)
        (table_argument
          (fieldlist
            (field
              (identifier)
              (tableconstructor
                (fieldlist
                  (field
                    (identifier))
                  (field
                    (string)))))
            (field
              (identifier)
              (tableconstructor
                (fieldlist
                  (field
                    (identifier))
                  (field
                    (string)))))
            (field
              (identifier)
              (tableconstructor
                (fieldlist
                  (field
                    (identifier))
                  (field
                    (string))
                  (field
                    (boolean)))))))))
    (function_end)))

================================================================================
Eval doc
================================================================================

--- Cooler function, with no params
---@eval 7 + 15
function M:even_cooler()
end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_eval
        (binary_operation
          (number)
          (number))))
    (function_start)
    (function_name
      (identifier)
      (table_colon)
      (identifier))
    (function_body_paren)
    (function_body_paren)
    (function_end)))

================================================================================
Multiple params
================================================================================


local x = {}

--- This function has documentation
---@param abc string: Docs for abc
  ---@param def string: Other docs for def
---@param bxy string: Final docs
function x.hello(abc, def, bxy)
  return abc .. def .. bxy
end

return x

--------------------------------------------------------------------------------

(program
  (variable_declaration
    (local)
    (variable_declarator
      (identifier))
    (tableconstructor))
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description)))
    (function_start)
    (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (binary_operation
          (binary_operation
            (identifier)
            (identifier))
          (identifier))))
    (function_end))
  (module_return_statement
    (identifier)))

================================================================================
Field
================================================================================

--- This function has documentation
---@param t table: Some table
---@field public name x.y: name
function M.hello(t)
  return t.name
end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_field
        (emmy_visibility)
        (identifier)
        (emmy_type
          (emmy_identifier))
        (field_description)))
    (function_start)
    (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (identifier)
        (identifier)))
    (function_end)))

================================================================================
Class comment
================================================================================

---@class Array @Numeric table

--------------------------------------------------------------------------------

(program
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (class_description))))

================================================================================
Super class comment
================================================================================

---@class Map @table table
---@class Array : Map @Numeric table

--------------------------------------------------------------------------------

(program
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (class_description)))
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (emmy_type
        (emmy_identifier))
      (class_description))))

================================================================================
Class with fields
================================================================================

---@class sqlite @db connection

---@class Stmt @object to deal with sqlite statements
---@field conn sqlite: connection to database

--------------------------------------------------------------------------------

(program
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (class_description)))
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (class_description))
    (emmy_field
      (identifier)
      (emmy_type
        (emmy_identifier))
      (field_description))))

================================================================================
Real world class
================================================================================

local Job = {}
--- HEADER
---@class Job @desc
---@field cmd string: comamnd
---@param o table: options
function Job:new(o)
  return setmetatable({}, self)
end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    (local)
    (variable_declarator
      (identifier))
    (tableconstructor))
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_class
        (emmy_type
          (emmy_identifier))
        (class_description))
      (emmy_field
        (identifier)
        (emmy_type
          (emmy_identifier))
        (field_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description)))
    (function_start)
    (function_name
      (identifier)
      (table_colon)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (function_call
          (identifier)
          (function_call_paren)
          (function_arguments
            (tableconstructor)
            (identifier))
          (function_call_paren))))
    (function_end)))

================================================================================
Using classes as types
================================================================================

local Job = {}

---@class Map @table lie

--- HEADER
---@class Job @desc
---@field cmd string: comamnd
---@param o table: options
function Job:new(o)
  return setmetatable(o, self)
end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    (local)
    (variable_declarator
      (identifier))
    (tableconstructor))
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier))
      (class_description)))
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_class
        (emmy_type
          (emmy_identifier))
        (class_description))
      (emmy_field
        (identifier)
        (emmy_type
          (emmy_identifier))
        (field_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description)))
    (function_start)
    (function_name
      (identifier)
      (table_colon)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (function_call
          (identifier)
          (function_call_paren)
          (function_arguments
            (identifier)
            (identifier))
          (function_call_paren))))
    (function_end)))

================================================================================
Brief with embedded strings
================================================================================

---@brief [[
--- "a string"
---@brief ]]

--------------------------------------------------------------------------------

(program
  (documentation_brief))

================================================================================
Can do dotted for return
================================================================================

---@return cmp.ConfigSchema
config.get = function()
end

--------------------------------------------------------------------------------

(program
  (variable_declaration
    (emmy_documentation
      (emmy_return
        (emmy_type
          (emmy_identifier))))
    (variable_declarator
      (identifier)
      (identifier))
    (function
      (function_start)
      (function_body_paren)
      (function_body_paren)
      (function_end))))

================================================================================
Should work with return from test:
================================================================================

--- This function has documentation
---@param abc string: Docs for abc
---@param def string: Other docs for def
---@param bxy string: Final docs
---@return string: concat
function x.hello(abc, def, bxy)
  return abc .. def .. bxy
end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_return
        (emmy_type
          (emmy_identifier))
        (emmy_return_description)))
    (function_start)
    (function_name
      (identifier)
      (table_dot)
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier)
      (identifier)
      (identifier))
    (function_body_paren)
    (function_body
      (return_statement
        (binary_operation
          (binary_operation
            (identifier)
            (identifier))
          (identifier))))
    (function_end)))

================================================================================
Docgen literal strings
================================================================================

--- This function has docs
---@param first "This"|"That"
function Wow(first) end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_literal))
        (parameter_description)))
    (function_start)
    (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))

================================================================================
Docgen table types
================================================================================

--- This function has a table
---@param first { hello: string, [5]: boolean }
function Wow(first) end

--------------------------------------------------------------------------------

(program
  (function_statement
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_type_dictionary
            (emmy_type_dictionary_value
              (identifier)
              (emmy_type
                (emmy_identifier)))
            (emmy_type_dictionary_value
              (number)
              (emmy_type
                (emmy_identifier)))))))
    (function_start)
    (function_name
      (identifier))
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_end)))

================================================================================
Documentation command
================================================================================

---@command CodyExplain [[
--- Something cool goes here
--- Another thing goes here
---@command ]]


--------------------------------------------------------------------------------

(program
  (documentation_command
    (documentation_usage)
    (documentation_command_content)
    (documentation_command_content)))

================================================================================
Various docs
================================================================================

---@class telescope_popup_options
---@field border table<1|2|3|4, integer>

--- Returns the buffer number for the given {bufnr}.
---
---@param bufnr (integer|nil) Buffer number to resolve. Defaults to current buffer
---@return integer bufnr
local function resolve_bufnr(bufnr)
  validate('bufnr', bufnr, 'number', true)
  if bufnr == nil or bufnr == 0 then
    return api.nvim_get_current_buf()
  end
  return bufnr
end


--------------------------------------------------------------------------------

(program
  (documentation_class
    (emmy_class
      (emmy_type
        (emmy_identifier)))
    (emmy_field
      (identifier)
      (emmy_type
        (emmy_type_key_value
          (emmy_type
            (emmy_literal))
          (emmy_type
            (emmy_literal))
          (emmy_type
            (emmy_literal))
          (emmy_type
            (emmy_literal))
          (emmy_type
            (emmy_identifier))))))
  (variable_declaration
    (emmy_documentation
      (emmy_header)
      (emmy_parameter
        (identifier)
        (emmy_type
          (emmy_identifier))
        (parameter_description))
      (emmy_return
        (emmy_type
          (emmy_identifier))))
    (variable_declarator
      (identifier)))
  (function_statement
    (local)
    (function_start)
    (identifier)
    (function_body_paren)
    (parameter_list
      (identifier))
    (function_body_paren)
    (function_body
      (function_call
        (identifier)
        (function_call_paren)
        (function_arguments
          (string)
          (identifier)
          (string)
          (boolean))
        (function_call_paren))
      (if_statement
        (if_start)
        (binary_operation
          (binary_operation
            (binary_operation
              (identifier)
              (nil))
            (identifier))
          (number))
        (if_then)
        (return_statement
          (function_call
            (identifier)
            (identifier)
            (function_call_paren)
            (function_call_paren)))
        (if_end))
      (return_statement
        (identifier)))
    (function_end)))
